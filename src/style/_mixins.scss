//helpers
// helpers
// =====================================================================================================================

// strip unit
// ---------------------------------------------------------------------------------------------------------------------
@function strip-unit($value) {
    @if type-of($value) == "number" and not unitless($value) {
        @return $value / ($value * 0 + 1);
    }
    @return $value;
}

// with unit
// ---------------------------------------------------------------------------------------------------------------------
@function with-unit($value, $unit) {
    @return #{$value}#{$unit};
}

// remify
// ---------------------------------------------------------------------------------------------------------------------
@function remify($value) {
    $unit: unit($value);
    @if ($unit == "px") {
        $rounded: round(strip-unit($value) / 16 * 100) / 100;
        @return with-unit($rounded, "rem");
    } @else {
        @return $value;
    }
}

// hex to dec
// ---------------------------------------------------------------------------------------------------------------------
@function hex-to-dec($string) {
    $hex: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "a" "b" "c" "d" "e" "f";
    $string: to-lower-case($string);
    $length: str-length($string);
    $dec: 0;
    @for $i from 1 through $length {
        $factor: 1 + (15 * ($length - $i));
        $index: index($hex, str-slice($string, $i, $i));
        $dec: $dec + $factor * ($index - 1);
    }
    @return $dec;
}

// hex to rgb
// ---------------------------------------------------------------------------------------------------------------------
@function hex-to-rgb($string) {
    $string-lower: to-lower-case($string);
    $r: "";
    $g: "";
    $b: "";
    $hex: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "a" "b" "c" "d" "e" "f";
    $length: str-length($string);
    $max: if($length == 4, 1, 2);
    @if $length != 4 and $length != 7 {
        @return $string;
    }
    @for $i from 2 through $length {
        $c: str-slice($string-lower, $i, $i);
        @if index($hex, $c) == null {
            @return $string;
        }
        @if str-length($r) < $max {
            $r: $r + $c;
        } @else if str-length($g) < $max {
            $g: $g + $c;
        } @else if str-length($b) < $max {
            $b: $b + $c;
        }
    }
    @if $length == 4 {
        $r: $r + $r;
        $g: $g + $g;
        $b: $b + $b;
    }
    @return rgb(hex-to-dec($r), hex-to-dec($g), hex-to-dec($b));
}

// var to color
// ---------------------------------------------------------------------------------------------------------------------
@function var-to-color($value) {
    @if type-of($value) == color {
        @return $value;
    } @else if str-index($value, "--") {
        $value: str-slice($value, str-index($value, "#"), -2);
        @return hex-to-rgb($value);
    } @else {
        @return $value;
    }
}



// mixins
// =====================================================================================================================



// ratio
// ---------------------------------------------------------------------------------------------------------------------
@mixin ratio($width, $height) {
  position: relative;

  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
}

// touch scroll
// ---------------------------------------------------------------------------------------------------------------------
@mixin touch-scroll($value, $axis: "") {
    @if ($value == "on") {
        overflow: auto;
        backface-visibility: hidden;
        -webkit-overflow-scrolling: touch;
        @if ($axis == "x") {
            overflow-x: auto;
            overflow-y: hidden;
        } @else if ($axis == "y") {
            overflow-y: auto;
            overflow-x: hidden;
        }
    } @else if ($value == "off") {
        overflow: visible;
        -webkit-overflow-scrolling: auto;
    }
}
// custom scrollbars
// ---------------------------------------------------------------------------------------------------------------------
// custom scrollbar
// ---------------------------------------------------------------------------------------------------------------------
$_thumb-bg: #dfe1e6;
$_scrollbar-bg: #FFFFFF;

$thumb-bg: var(--thumb-bg, #{$_thumb-bg});
$scrollbar-bg: var(--scrollbar-bg, #{$_scrollbar-bg});

@mixin custom-scrollbars() {
    scrollbar-width: thin;
    scrollbar-color: $thumb-bg $scrollbar-bg;
    &::-webkit-scrollbar {
        height: 12px;
        width: 12px;
    }
    &::-webkit-scrollbar-track {
        background: $scrollbar-bg;
    }
    &::-webkit-scrollbar-thumb {
        background-color: $thumb-bg;
        border-radius: 10px;
        border: 3px solid $scrollbar-bg;
        transition: background-color 0.15s cubic-bezier(0.445, 0.05, 0.55, 0.95) 0s, border-color 0.15s cubic-bezier(0.445, 0.05, 0.55, 0.95) 0s;
    }
}
// hide scrollbars
// ---------------------------------------------------------------------------------------------------------------------
@mixin hide-scrollbars() {
    &::-webkit-scrollbar,
    &::-webkit-scrollbar-track,
    &::-webkit-scrollbar-thumb,
    &::-webkit-scrollbar-track-piece:start,
    &::-webkit-scrollbar-track-piece:end {
        display: none;
        width: 0;
        height: 0;
        background: transparent none 0 0;
    }
}

// bg
// ---------------------------------------------------------------------------------------------------------------------
@mixin bg($background: null, $args...) {
    $args: if(type-of($args) != arglist or length($args) == 0, (null), $args);

    @if (type-of($background) == color and type-of(nth($args, 1)) == number) {
        background: rgba($background, nth($args, 1));
    }

    @else if (is-css-variable($background)) {
        background: $background;
    }

    @else if (type-of($background) == color and type-of(nth($args, 1)) == color) {
        // Vertical Gradient
        background: linear-gradient(to bottom, $background, nth($args, 1));
    }

    @else if (is-gradient($background)) {
        // Generic linear gradient
        background: linear-gradient($background, $args);
    }

    @else if (type-of($background) == color) {
        background: $background;
    }

    @else if (type-of($background) == string) {
        // background image

        @if (is-retina-image($background)) {
            // with retina

            $background-not-retina: get-non-retina-url($background);
            $dimensions: image-dimensions($background-not-retina);
            $image-width: map-get($dimensions, "width");

            background: url("#{$background-not-retina}") $args;

            @include retina() {
                background-image: url("#{$background}");
                background-size: #{$image-width}px auto;
            }
        }

        @else {
            // normal

            background: url("#{$background}") $args;
        }
    }

    @else if ($background == null) {
        // reset color

        background: none;
    }

    @else {
        // warn if not known arguments

        @warn 'Wrong parameters for bg() helper!';
    }
}

// set font size
// ---------------------------------------------------------------------------------------------------------------------
@mixin set-font-size($value) {
    @if ($value == "inherit") {
        font-size: inherit;
    } @else {
        font-size: remify($value);
    }
}

// placeholder
// ---------------------------------------------------------------------------------------------------------------------
@mixin placeholder() {
    &::placeholder {
        @content;
    }

    &::-webkit-input-placeholder {
        @content;
        line-height: normal;
    }

    &::-moz-placeholder {
        @content;
        opacity: 1;
    }

    &::-ms-input-placeholder {
        @content;
    }
}

// mobile
// ---------------------------------------------------------------------------------------------------------------------
@mixin mobile() {
    @media (min-width: 320px) {
        @content;
    }
}

// phablet
// ---------------------------------------------------------------------------------------------------------------------
@mixin phablet() {
    @media (min-width: 501px) {
        @content;
    }
}

// tablet
// ---------------------------------------------------------------------------------------------------------------------
@mixin tablet() {
    @media (min-width: 768px) {
        @content;
    }
}

// desktop
// ---------------------------------------------------------------------------------------------------------------------
@mixin desktop() {
    @media (min-width: 1024px) {
        @content;
    }
}

// large
// ---------------------------------------------------------------------------------------------------------------------
@mixin large() {
    @media (min-width: 1401px) {
        @content;
    }
}

// retina ready
// ---------------------------------------------------------------------------------------------------------------------
@mixin image-2x($image, $width, $height) {
    @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
        /* on retina, use image that's scaled by 2 */
        background-image: url($image);
        background-size: $width $height;
    }
}
// example
/* background: url("logo.png") no-repeat;
@include image-2x("logo2x.png", 100px, 25px); */


// autofill
// ---------------------------------------------------------------------------------------------------------------------
@mixin autofill() {
    &:-webkit-autofill {
        @content;
    }
}

@mixin dashed ($color) {
    border: 1px dashed rgba($color, 1);
}





